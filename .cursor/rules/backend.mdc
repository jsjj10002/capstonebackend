---
description: 
globs: 
alwaysApply: true
---
# Backend 개발 규칙

##  기본 원칙

### 1. 코드 일관성 및 명명 규칙
- 수정 시 기존 함수, 변수, 클래스명을 임의로 변경하지 않는다
- 이미 동일한 기능을 가진 함수나 클래스를 중복 생성하지 않는다
- 코드의 일관성을 유지한다 (스타일, 패턴, 구조)
- 변수명은 명확하고 의미있게 작성한다 (예: `userData` > `data`, `isAuthenticated` > `auth`)

### 2. 문서화 및 변경 관리
- 변경 사항을 README.md에 반드시 반영한다 (추가, 수정, 삭제 모든 변경사항)
- API 변경 시 API 명세서도 함께 업데이트한다
- 주요 기능 변경 시 진행 상황 정리 섹션도 업데이트한다

##  기술별 가이드라인

### 3. Express.js & API 개발
- RESTful API 설계 원칙을 준수한다
- 에러 핸들링은 일관된 형식을 사용한다 (`try-catch` 블록 필수)
- 미들웨어는 재사용 가능하도록 모듈화한다
- HTTP 상태 코드를 적절히 사용한다 (200, 201, 400, 401, 404, 500 등)

### 4. 데이터베이스 (MongoDB)
- 스키마 변경 시 기존 데이터 호환성을 고려한다
- 인덱스 사용으로 쿼리 성능을 최적화한다
- 데이터 검증은 스키마 레벨과 컨트롤러 레벨 모두에서 수행한다

### 5. 인증 및 보안
- JWT 토큰 검증을 모든 보호된 라우트에 적용한다
- 비밀번호는 반드시 해싱하여 저장한다
- 민감한 정보는 환경 변수로 관리한다
- CORS 설정을 적절히 구성한다

### 6. 파일 업로드 및 외부 서비스 연동
- AWS S3 업로드 시 파일 타입과 크기를 검증한다
- OpenAI API 호출 시 rate limit과 에러 처리를 고려한다
- ComfyUI 연동 시 타임아웃과 재시도 로직을 구현한다
- 외부 API 호출은 항상 예외 처리를 포함한다

##  코드 품질 관리

### 7. 에러 처리 및 로깅
- 모든 비동기 함수에 적절한 에러 처리를 구현한다
- 에러 메시지는 사용자 친화적이면서도 디버깅에 유용하도록 작성한다
- 중요한 동작에는 로그를 남겨 디버깅을 용이하게 한다

### 8. 성능 및 최적화
- 불필요한 데이터베이스 쿼리를 방지한다
- 파일 업로드 시 적절한 크기 제한을 설정한다
- AI API 호출을 최적화하여 비용을 절약한다

### 9. 테스트 및 검증
- 새로운 기능 추가 시 기존 기능에 영향을 주지 않는지 확인한다
- API 엔드포인트는 다양한 시나리오로 테스트한다
- 데이터 유효성 검사를 철저히 수행한다

##  AI 및 외부 서비스 연동 규칙

### 10. OpenAI API 사용
- 프롬프트는 명확하고 구체적으로 작성한다
- API 응답의 구조를 일관되게 파싱한다
- 토큰 사용량을 모니터링하고 최적화한다

### 11. ComfyUI 연동
- 워크플로우 JSON은 버전 관리한다
- 이미지 생성 결과는 적절히 검증한다
- 생성 실패 시 사용자에게 명확한 피드백을 제공한다

##  추가 개발 시 고려사항

### 12. 확장성 고려
- 새로운 기능 추가 시 기존 아키텍처와의 호환성을 고려한다
- 코드는 모듈화하여 재사용성을 높인다
- 설정값은 환경 변수나 설정 파일로 분리한다

### 13. 사용자 경험
- API 응답 시간을 최적화한다
- 명확하고 일관된 에러 메시지를 제공한다
- 사용자 입력에 대한 적절한 검증과 피드백을 제공한다
